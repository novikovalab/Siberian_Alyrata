gene="AL1G35730"
outgr="SRR2040802"
gr_names=(Eur_dipl
Eur_tetr
CES_dipl
PUWS_dipl
CES_tetr
PUWS_tetr)
vcf_path=""

group_array=(ERR3514883,ERR3514884,SRR2040797,SRR3111440,ERR3514885,ERR3514886,SRR3111441,ERR3514898,ERR3514899,ERR3514897,SRR2040791,SRR3111442,SRR2040798,SRR3111443,SRR2040790,ERR4235091,SRR5124975,ERR4235088,ERR4235093,SRR5124986,ERR4235094,ERR4235090,SRR5124989,ERR4235095,ERR4235097,SRR5124990,ERR4235096,ERR4235092,ERR4235089,SRR5124984,SRR5125003,SRR3111439,SRR2040794,SRR2040793,SRR5124988,SRR5124976,ERR3397911,ERR3397909,ERR3397908,ERR3397914,ERR3397904,ERR3397913,ERR3397905,ERR3397912,ERR3397907,ERR3397910,ERR3397906,SRR7119545,SRR7119548,SRR7119547,SRR7119532,SRR7119543,SRR7119546,SRR7119544,SRR5124977,SRR5124997,SRR5124998,SRR5124983,SRR5124999,SRR5124985,SRR7119539,SRR7119535,SRR7119537,SRR7119533,SRR7119536,SRR7119540,SRR7119534,SRR7119541,SRR7119527,SRR7119531,SRR7119530,SRR7119529,SRR7119528,SRR7119526,SRR7119524,SRR7119542,SRR7119525,SRR7119523,SRR9319648,SRR9319641,SRR9319646,SRR9319645,SRR9319644,SRR9319647,SRR9319649,SRR9319643,SRR9319642,SRR5124978,SRR5124987,SRR5125002,SRR5124996,SRR5124982,SRR5124995
ERR3514860_4n,ERR3514858_4n,ERR3514859_4n,SRR2040827_4n,SRR2040826_4n,ERR3514878_4n,ERR3514880_4n,ERR3514879_4n,ERR3514869_4n,ERR3514871_4n,ERR3514870_4n,SRR2040828_4n,ERR3514887_4n,ERR3514889_4n,ERR3514888_4n,ERR3514893_4n,ERR3514892_4n,ERR3514865_4n,ERR3514866_4n,ERR3514864_4n,ERR3514895_4n,ERR3514896_4n,ERR3514876_4n,ERR3514877_4n,ERR3514875_4n,SRR2040830_4n,ERR3514873_4n,ERR3514874_4n,ERR3514872_4n,SRR3111448_4n
2:IRK-ID51711,IRKU048360,IRK-ID2040,2:IRK-ID51712,IRKU049798,IRK-ID61141,IRKU084814,IRK-STAN,MW0079543_2,BAM_12.1-1,MW0079491_2,MW0079491,IRK-ID27652,MW0079473_1,MW0079496,MW0079493_1,NT8.4-5,NT8.3-4,NT8_5_1,NT8_4_1,NT8_1_1,NT8_2_1,NT8_3_1,MW0079467_1,NT12_1_1,NT12_2_1,MW0079486_3,MW0079537_3,MW0079537,SRR2040804,NT13_9_1,NT4.1,NT4_3_1,NT4_2_1,NT17.1-5,NT17.1-1,NT17.1-4,NT17.4-2,NT17.4-4,NT17.4-3,NT17.4-1,NT17.1-2,NT17.5-1,NT18-4,NT18-2,NT18-1,NT18-3,NT18-6,NT15_5_1,NT15_2_1,NT15_3_1,NT15_4_1,NT15_1_1,NT14_3_1,NT14_5_1,NT14_1_1,NT14_6_1,NT14_7_1,NT14_10_1,NT14_11_1,NT14_4_1,NT14_8_1,NT9_5_1,NT9_3_1,NT9_1_1,NT9_4_1,NT9_2_1,NT10_1_1,NT10_3_1,NT10_2_1,MW0157476_2,NT5_2_1,NT5_3_1,NT5_1_1,NT2_4_1,NT2_3_1,NT2_1_1,NT2_5_1,NT2_2_1,MW0079538,MW0158707,NT19.1-6,NT19.1-4,NT19.1-5,NT19.1-3,NT19.1-1,NT19.3-3,NT19.2-2,NT19.3-1,NT19.1-2,NT19.2-1,NT19.3-2,MW0158706,MW0079494_2,IRKU049804,MW0079545,NT16.5-4,NT16.3-7,NT16.4-1,NT16.1-5,NT16.5-1,NT16.2-2,NT16.1-2,NT16.4-3,NT16.5-2,NT16.4-2,NT16.5-3,NT16.3-1,NT16.4-4,NT16.1-1,NT16.3-6,NT16.3-5,NT16.1-4,NT16.2-1,NT20.3-1,NT20.6-3,NT20.3-3,NT20.4-1,NT20.1-1,NT20.4-2,NT20.6-2,NT20.4-3,NT20.3-2,MW0079604_5,MW0079604,MW0079579,MW0079581
MW0079587_4,MW0079587_6,TE_3.3-1,TE_3.9-2,TE_3.2-1,TE_3.5-2,TE_3.5-1,TE_3.7-1,TE_3.9-1,TE_3.1-2,TE_3.8-1,TE_3.6-1,TE_3.3-2,TE_3.2-2,TE_3.7-2,TE_3.1-1,TE_3.4-2,TE_3.8-2,TE_3.6-2,TE_3.4-1,TE_4.11-2,TE_4.7-1,TE_4.6-2,TE_4.5-1,TE_4.2-1,TE_4.3-1,TE_4.11-1,TE_4.5-2,TE_4.6-1,TE_4.2-2,TE_4.8-2,TE_4.3-2,TE_4.8-1,TE_4.4-2,TE_4.9-2,TE_4.10-2,TE_4.9-1,TE_4.10-1,TE_4.4-1,TE_7.2-1,TE_7.3-2,TE_7.3-1,TE_7mix-1,TE_7.5-2,TE_7.9-1,TE_7.1-1,TE_7.8-1,TE_7.4-2,TE_7.5-1,TE_7.2-2,TE_7.7-2,TE_7.4-1,TE_7.8-2,TE_7.1-2,TE_7.6-1,TE_7.7-1,TE_7.9-2,TE_7mix-2,TE_7.6-2,TE_6.1-2,TE_6.2-1,TE_6.2-2,TE_6.1-1,TE_5.5-1,TE_5.1-2,TE_5.9-1,TE_5.10-2,TE_5.7-2,TE_5.8-2,TE_5.6-1,TE_5.3-2,TE_5.6-2,TE_5.10-1,TE_5.3-1,TE_5.2-2,TE_5.7-1,TE_5.5-2,TE_5.4-1,TE_5.8-1,TE_5.1-1,TE_5.9-2,TE_5.2-1,TE_5.4-2,TE_8.8-1,TE_8.3-1,TE_8.6-2,TE_8.9-2,TE_8.10-2,TE_8.5-1,TE_8.2-1,TE_8.2-2,TE_8.7-2,TE_8.8-2,TE_8.7-1,TE_8.6-1,TE_8.4-1,TE_8mix-2,TE_8.9-1,TE_8.3-2,TE_8mix-1,TE_8.5-2,TE_8.1-2,TE_8.10-1,TE_8.4-2,TE_8.1-1,TE_10.3-1,TE_10.4-2,TE_10.3-2,TE_10.8-1,TE_10.7-1,TE_10.5-1,TE_10.6-1,TE_10.6-2,TE_10.9-1,TE_10.8-2,TE_10.1-1,TE_10.2-2,TE_10.2-1,TE_10.9-2,TE_10.1-2,TE_10.7-2,TE_10.4-1,TE_10.5-2,TE_9.1-1,TE_9.1-2,TE_11.3-1,TE_11.4-2,TE_11.3-2,TE_11.1-1,TE_11.5-1,TE_11.4-1,TE_11.1-2,TE_11.2-1,TE_11.2-2,TE_11.5-2,TE_11.9-2,TE_11.7-2,TE_11.7-1,TE_11.8-1,TE_11.10-1,TE_11.9-1,TE_11.6-1,TE_11.10-2,TE_11.8-2,TE_11.6-2,MW0079608_3,MW0079559,MW0079583_3,MW0079583_1,MW0079583_2,MW0079895,MW0079585,MW0079582,MW0079591,MW0079510_1,MW0079509
IRKU049797_4n,IRKU049793_4n,al4_1_4n,al3_1_4n,al1_1_4n,al2_1_4n,MW0157478_2_4n,MW0157478_4n,MW0079577_2_4n,MW0079546_4n,MW0079546_2_4n,MW0158708_4n,MW0079568-4_1_4n,MW0079568-3_1_4n,MW0079569-2_1_4n,MW0079568-1_1_4n,MW0079544_4n,MW0079609_4_4n,MW0079609_4n,MW0079609_3_4n,MW0079578-1_4n,MW0079572-1_4n,MW0079573_4n,MW0079573_5_4n,MW0079573_4_4n,MW0079573_1_4n,MW0079573_3_4n,MW0079558_2_4n,MW0079572-3_1_4n,MW0079552_2_4n,MW0079552_3_4n,MW0079552_4n,MW0079552_7_4n,MW0079552_8_4n,MW0079507_4n,MW0079572-2_4n,MW0079575_4n,MW0079610_4n,MW0079606_4n,IRKU049803_4n
WS_1.3-1_4n,WS_1.1-2_4n,WS_1.2-1_4n,WS_1.1-1_4n,WS_1.6-1_4n,WS_1.7-1_4n,WS_1.5-1_4n,WS_1.4-2_4n,WS_1.6-2_4n,WS_1.5-2_4n,WS_1.4-1_4n,WS_1.2-2_4n,WS_1.3-2_4n,WS_1.7-2_4n,MW0374083_4_4n,MW0374083_6_4n,MW0374085_11_4n,MW0374083_4n,MW0374085_1_4n,MW0374087_5_4n,MW0374087_4n,SRR2040805_4n,PU_1mix-2_4n,PU_1mix-1_4n,PU_2mix-2_4n,PU_2mix-1_4n,PU_4mix-1_4n,PU_4mix-2_4n,PU_3mix-2_4n,PU_3mix-1_4n,PU_5mix-1_4n,PU_5mix-2_4n,MW0079589_9_4n,MW0079589_4n,MW0079589_11_4n,MW0079589_8_4n,PU_7.1-1_4n,PU_7.2-2_4n,PU_7mix-1_4n,PU_7.2-1_4n,PU_7mix-2_4n,PU_7.1-2_4n,PU_6.1-2_4n,PU_6.5-1_4n,PU_6.7-2_4n,PU_6.2-1_4n,PU_6mix-1_4n,PU_6.8-2_4n,PU_6mix-2_4n,PU_6.5-2_4n,PU_6.2-2_4n,PU_6.4-2_4n,PU_6.1-1_4n,PU_6.7-1_4n,PU_6.8-1_4n,PU_6.6-2_4n,PU_6.4-1_4n,PU_6.3-2_4n,PU_6.6-1_4n,PU_6.3-1_4n,MW0374102-2_4n,MW0079584_4n,MW0374095_4n,MW0374101_4n,MW0374084_2_4n,MW0374084_4n)

joinByChar() {
local IFS="$1"
shift
echo "$*"
}
full_list=$(joinByChar , "${group_array[@]}")  # Join all samples together

# Get gene intervals
intervals=$(grep ${gene} NT1_220222.gff3 | grep CDS | cut -f 1,4,5 | awk '{print $1":"$2"-"$3}' | paste -sd ',')
#intervals=$(grep ${gene} /netscratch/dep_mercier/grp_novikova/A.Lyrata/anna_g/long_braker/NT1_helixer_helixer.gff | grep CDS | cut -f 1,4,5 | awk '{print $1":"$2"-"$3}' | paste -sd ',')
# Subset the samples and the gene intervals from the big vcf
#echo ${intervals}
#echo ${full_list}
#echo ${outgr}
#echo ${full_list},${outgr}
bcftools view -O z -s ${full_list},${outgr} -r ${intervals} --max-alleles 2 --force-samples --min-alleles 2 --types snps ${vcf_path} | bcftools view -O z --exclude 'COUNT(GT="mis")>102' > ${gene}.snps.vcf.gz


# Get files with number of alleles for each group
for i in "${!gr_names[@]}"; do
bcftools view --force-samples -s ${outgr},${group_array[i]} ${gene}.snps.vcf.gz > work.vcf
echo "loooop"
bcftools view -H work.vcf | cut -f 4,5,10 | sed 's/:[0123456789,\._ATGC\|]*//g' | sed 's/\t/,/g' |  awk -F, '{am=0;tm=0;gm=0;cm=0;as=0;ts=0;gs=0;cs=0;af=0;tf=0;gf=0;cf=0; if($1 ~ /[aA]/)  am=gsub(/0/,"");if($1 ~ /[tT]/) tm=gsub(/0/,"");if($1 ~ /[gG]/) gm=gsub(/0/,"");if($1 ~ /[cC]/) cm=gsub(/0/,""); if($2 ~ /[aA]/)  am=gsub(/1/,"");if($2 ~ /[tT]/) tm=gsub(/1/,"");if($2 ~ /[gG]/) gm=gsub(/1/,"");if($2 ~ /[cC]/) cm=gsub(/1/,""); printf "%d,%d,%d,%d\n", am,cm,gm,tm }' > outgr_sfs
#sed 's/1/0/g' preoutgr_sfs | sed 's/2/1/' > outgr_sfs
bcftools view -H work.vcf | cut -f 4,5,11- | sed 's/:[0123456789,\._ATGC\|]*//g' | sed 's/\t/,/g' |  awk -F, '{am=0;tm=0;gm=0;cm=0;as=0;ts=0;gs=0;cs=0;af=0;tf=0;gf=0;cf=0; if($1 ~ /[aA]/)  am=gsub(/0/,"");if($1 ~ /[tT]/) tm=gsub(/0/,"");if($1 ~ /[gG]/) gm=gsub(/0/,"");if($1 ~ /[cC]/) cm=gsub(/0/,""); if($2 ~ /[aA]/)  am=gsub(/1/,"");if($2 ~ /[tT]/) tm=gsub(/1/,"");if($2 ~ /[gG]/) gm=gsub(/1/,"");if($2 ~ /[cC]/) cm=gsub(/1/,""); printf "%d,%d,%d,%d\n", am,cm,gm,tm }' > sfs_snps
bcftools view -H work.vcf | cut -f 2 > coords
paste -d "," coords sfs_snps outgr_sfs | grep -v 0,0,0,0$ > ${gene}_${gr_names[i]}_fin.csv
done

